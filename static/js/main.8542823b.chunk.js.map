{"version":3,"sources":["Components/Profile/profile.module.css","Components/FriendList/FriendList.module.css","Components/Statistics/Statistics.module.css","Components/TransactionHistory/TransactionHistory.module.css","Components/Profile/Profile.js","Components/Statistics/Statistics.js","Components/FriendList/FriendListItem/FriendListItem.js","Components/FriendList/FriendList.js","Components/TransactionHistory/TransactionHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","className","classes","profile","description","src","user","avatar","alt","name","tag","location","stats","label","quantity","followers","views","likes","Statistics","title","statistics","map","el","item","key","id","percentage","FriendListItem","isOnline","online","offline","width","FriendList","friends","TransactionHistory","items","type","amount","currency","App","statisticalData","friendsData","itemsData","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8542823b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__3upQo\",\"description\":\"profile_description__JgLRb\",\"avatar\":\"profile_avatar__Nw3Iw\",\"stats\":\"profile_stats__10T8T\",\"name\":\"profile_name__1nqEi\",\"tag\":\"profile_tag__G2_6f\",\"location\":\"profile_location__RzyfX\",\"label\":\"profile_label__iuztX\",\"quantity\":\"profile_quantity__2NBz7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend-list\":\"FriendList_friend-list__33o9H\",\"item\":\"FriendList_item__2IMow\",\"name\":\"FriendList_name__3kpgx\",\"online\":\"FriendList_online__3IzBI\",\"offline\":\"FriendList_offline__f-Puu\",\"avatar\":\"FriendList_avatar__N2Mn0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__BlaTO\",\"stat-list\":\"Statistics_stat-list__sYyN-\",\"item\":\"Statistics_item__3ktk-\",\"percentage\":\"Statistics_percentage__3Biwt\",\"title\":\"Statistics_title__1kq4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transaction-history\":\"TransactionHistory_transaction-history__3_ci0\",\"transaction-history--row\":\"TransactionHistory_transaction-history--row__WHjaz\"};","import React from \"react\";\nimport user from \"./user.json\";\nimport classes from \"./profile.module.css\";\n\nconst Profile = () => {\n  return (\n    <div className={classes.profile}>\n      <div className={classes.description}>\n        <img src={user.avatar} alt=\"user avatar\" className={classes.avatar} />\n        <p className={classes.name}>{user.name}</p>\n        <p className={classes.tag}>{user.tag}</p>\n        <p className={classes.location}>{user.location}</p>\n      </div>\n      <ul className={classes.stats}>\n        <li>\n          <span className={classes.label}>Followers</span>\n          <span className={classes.quantity}>{user.stats.followers}</span>\n        </li>\n        <li>\n          <span className={classes.label}>Views</span>\n          <span className={classes.quantity}>{user.stats.views}</span>\n        </li>\n        <li>\n          <span className={classes.label}>Likes</span>\n          <span className={classes.quantity}>{user.stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\r\nimport classes from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ title, stats }) => {\r\n  return (\r\n    <section className={classes.statistics}>\r\n      <h2 className={classes.title}>{title}</h2>\r\n      <ul className={classes[\"stat-list\"]}>\r\n        {stats.map(el => (\r\n          <li className={classes.item} key={el.id}>\r\n            <span className=\"label\">{el.label}</span>\r\n            <span className={classes.percentage}>{el.percentage} %</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport classes from \"../FriendList.module.css\";\r\n\r\nconst FriendListItem = ({ avatar, name, isOnline }) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      {isOnline ? (\r\n        <span className={classes.online}></span>\r\n      ) : (\r\n        <span className={classes.offline}></span>\r\n      )}\r\n\r\n      <img className={classes.avatar} src={avatar} alt={name} width=\"55\" />\r\n      <p className={classes.name}>{name}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default FriendListItem;\r\n","import React from \"react\";\r\nimport FriendListItem from \"./FriendListItem/FriendListItem\";\r\nimport classes from \"./FriendList.module.css\";\r\n\r\nconst FriendList = ({ friends }) => {\r\n  return (\r\n    <ul className={classes[\"friend-list\"]}>\r\n      {friends.map(el => (\r\n        <FriendListItem\r\n          avatar={el.avatar}\r\n          name={el.name}\r\n          key={el.id}\r\n          isOnline={el.isOnline}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FriendList;\r\n","import React from \"react\";\r\nimport classes from \"./TransactionHistory.module.css\";\r\n\r\nconst TransactionHistory = ({ items }) => {\r\n  return (\r\n    <table className={classes[\"transaction-history\"]}>\r\n      <thead>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>Amount</th>\r\n          <th>Currency</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {items.map(el => (\r\n          <tr key={el.id} className={classes[\"transaction-history--row\"]}>\r\n            <td>{el.type}</td>\r\n            <td>{el.amount}</td>\r\n            <td>{el.currency}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TransactionHistory;\r\n","import React, { Fragment } from \"react\";\nimport Profile from \"./Components/Profile/Profile\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport statisticalData from \"./Components/Statistics/statistical-data.json\";\nimport FriendList from \"./Components/FriendList/FriendList\";\nimport friendsData from \"./Components/FriendList/friends.json\";\nimport TransactionHistory from \"./Components/TransactionHistory/TransactionHistory\";\nimport itemsData from \"./Components/TransactionHistory/transactions.json\";\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Profile />,\n      <Statistics title=\"Upload stats\" stats={statisticalData} />,\n      <FriendList friends={friendsData} />\n      <TransactionHistory items={itemsData} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}